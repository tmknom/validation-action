name: Validation Action
description: |
  Validates the input values against formats, patterns, ranges, character sets, and other user-defined rules.

inputs:
  value:
    required: true
    description: The value to validate.
  not-empty:
    required: false
    description: Validates whether the input value is not empty.
  digit:
    required: false
    description: Validates whether the input value contains only digits (0-9).
  alpha:
    required: false
    description: Validates whether the input value contains only English letters (a-zA-Z).
  alphanumeric:
    required: false
    description: Validates whether the input value contains only English letters and digits (a-zA-Z0-9).
  ascii:
    required: false
    description: Validates whether the input value contains only ASCII characters.
  printable-ascii:
    required: false
    description: Validates whether the input value contains only printable ASCII characters.
  int:
    required: false
    description: Validates whether the input value is an integer.
  float:
    required: false
    description: Validates whether the input value is a floating-point number.
  url:
    required: false
    description: Validates whether the input value is a valid URL.
  email:
    required: false
    description: Validates whether the input value is a valid email address.
  semver:
    required: false
    description: Validates whether the input value is a valid semantic version.
  base64:
    required: false
    description: Validates whether the input value is valid Base64.
  json:
    required: false
    description: Validates whether the input value is valid JSON.
  exact-length:
    required: false
    description: Validates whether the input value's length is exactly equal to the specified number.
  min-length:
    required: false
    description: Validates whether the input value's length is greater than or equal to the specified minimum.
  max-length:
    required: false
    description: Validates whether the input value's length is less than or equal to the specified maximum.
  min:
    required: false
    description: Validates whether the input value is greater than or equal to the specified minimum.
  max:
    required: false
    description: Validates whether the input value is less than or equal to the specified maximum.
  enum:
    required: false
    description: Validates whether the input value matches any of the specified enumerations.
  timestamp:
    required: false
    description: Validates whether the input value matches a timestamp format [rfc3339, datetime, date, time].
  pattern:
    required: false
    description: Validates whether the input value matches the specified regular expression.

runs:
  using: composite

  steps:
    - name: Create working directory
      id: work
      run: |
        echo "::group::Create working directory"
        set -x
        repo="$(cut -d / -f 7 <<<"${GITHUB_ACTION_PATH/./${GITHUB_REPOSITORY_ID}}")"
        owner="$(cut -d / -f 6 <<<"${GITHUB_ACTION_PATH}")"
        sha256="$(sha256sum "${GITHUB_ACTION_PATH}/action.yml" | cut -d ' ' -f 1)"

        workdir="${RUNNER_TEMP}/__${owner}-${repo}-${sha256}"
        echo "dir=${workdir}" >> "${GITHUB_OUTPUT}"
        mkdir -p "${workdir}"
        echo "::endgroup::"
      shell: bash

    - name: Check Cosign is installed
      id: installed
      run: |
        echo "::group::Check Cosign is installed"
        set -x
        installed="false"
        if [ "$(which cosign)" ]; then
          installed="true"
        fi;
        echo "cosign=${installed}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash

    - name: Install Cosign
      uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
      if: ${{ steps.installed.outputs.cosign == 'false' }}

    - name: Install valid
      working-directory: ${{ steps.work.outputs.dir }}
      env:
        EXECUTABLE: valid
        VERSION: '0.2.3'
        COMMIT_DIGEST: 7ebf8665987ef63feef9732e478edced55941f6f
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        echo "::group::Install valid"
        set -x
        repository="tmknom/${EXECUTABLE}"
        executable_file="${EXECUTABLE}_${VERSION}_linux_amd64"
        checksum_file="${EXECUTABLE}_${VERSION}_checksums.txt"
        oidc_issuer="https://token.actions.githubusercontent.com"
        build_signer_uri="https://github.com/tmknom/release-workflows/.github/workflows/go.yml"
        build_signer_digest="9a415d93dc423de8e4ff66562ede2d8514eb69d3"
        build_signer_identity="${build_signer_uri}@${build_signer_digest}"

        # Download asset files
        base_url="https://github.com/${repository}/releases/download/v${VERSION}"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${executable_file}"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${executable_file}.sig"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${executable_file}.pem"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${checksum_file}"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${checksum_file}.sig"
        curl --silent --show-error --fail --location --remote-name "${base_url}/${checksum_file}.pem"

        # Verify checksum file
        cosign verify-blob \
          --signature "${checksum_file}.sig" \
          --certificate "${checksum_file}.pem" \
          --certificate-oidc-issuer "${oidc_issuer}" \
          --certificate-identity "${build_signer_identity}" \
          --certificate-github-workflow-repository "${repository}" \
          --certificate-github-workflow-sha "${COMMIT_DIGEST}" \
          "${checksum_file}"
        sha256sum --ignore-missing -c "${checksum_file}"

        # Verify executable file
        cosign verify-blob \
          --signature "${executable_file}.sig" \
          --certificate "${executable_file}.pem" \
          --certificate-oidc-issuer "${oidc_issuer}" \
          --certificate-identity "${build_signer_identity}" \
          --certificate-github-workflow-repository "${repository}" \
          --certificate-github-workflow-sha "${COMMIT_DIGEST}" \
          "${executable_file}"

        # Verify GitHub Artifact Attestations
        gh attestation verify "${executable_file}" \
          --deny-self-hosted-runners \
          --cert-oidc-issuer "${oidc_issuer}" \
          --cert-identity "${build_signer_identity}" \
          --repo "${repository}"

        chmod +x "${executable_file}"
        mv "${executable_file}" "/usr/local/bin/${EXECUTABLE}"
        echo "::endgroup::"
      shell: bash

    - name: Run valid
      env:
        VALUE: ${{ inputs.value }}
        NOT_EMPTY: ${{ inputs.not-empty }}
        DIGIT: ${{ inputs.digit }}
        ALPHA: ${{ inputs.alpha }}
        ALPHANUMERIC: ${{ inputs.alphanumeric }}
        ASCII: ${{ inputs.ascii }}
        PRINTABLE_ASCII: ${{ inputs.printable-ascii }}
        INT: ${{ inputs.int }}
        FLOAT: ${{ inputs.float }}
        URL: ${{ inputs.url }}
        EMAIL: ${{ inputs.email }}
        SEMVER: ${{ inputs.semver }}
        BASE64: ${{ inputs.base64 }}
        JSON: ${{ inputs.json }}
        EXACT_LENGTH: ${{ inputs.exact-length }}
        MIN_LENGTH: ${{ inputs.min-length }}
        MAX_LENGTH: ${{ inputs.max-length }}
        MIN: ${{ inputs.min }}
        MAX: ${{ inputs.max }}
        ENUM: ${{ inputs.enum }}
        TIMESTAMP: ${{ inputs.timestamp }}
        PATTERN: ${{ inputs.pattern }}
      run: |
        echo "::group::Run valid"
        set -x
        flags=(--value "${VALUE}")

        if [[ "${NOT_EMPTY}" != "" && "${NOT_EMPTY}" != "false" ]]; then
          flags+=(--not-empty)
        fi

        if [[ "${DIGIT}" != "" && "${DIGIT}" != "false" ]]; then
          flags+=(--digit)
        fi

        if [[ "${ALPHA}" != "" && "${ALPHA}" != "false" ]]; then
          flags+=(--alpha)
        fi

        if [[ "${ALPHANUMERIC}" != "" && "${ALPHANUMERIC}" != "false" ]]; then
          flags+=(--alphanumeric)
        fi

        if [[ "${ASCII}" != "" && "${ASCII}" != "false" ]]; then
          flags+=(--ascii)
        fi

        if [[ "${PRINTABLE_ASCII}" != "" && "${PRINTABLE_ASCII}" != "false" ]]; then
          flags+=(--printable-ascii)
        fi

        if [[ "${INT}" != "" && "${INT}" != "false" ]]; then
          flags+=(--int)
        fi

        if [[ "${FLOAT}" != "" && "${FLOAT}" != "false" ]]; then
          flags+=(--float)
        fi

        if [[ "${URL}" != "" && "${URL}" != "false" ]]; then
          flags+=(--url)
        fi

        if [[ "${EMAIL}" != "" && "${EMAIL}" != "false" ]]; then
          flags+=(--email)
        fi

        if [[ "${SEMVER}" != "" && "${SEMVER}" != "false" ]]; then
          flags+=(--semver)
        fi

        if [[ "${BASE64}" != "" && "${BASE64}" != "false" ]]; then
          flags+=(--base64)
        fi

        if [[ "${JSON}" != "" && "${JSON}" != "false" ]]; then
          flags+=(--json)
        fi

        if [[ "${EXACT_LENGTH}" != "" ]]; then
          flags+=(--exact-length "${EXACT_LENGTH}")
        fi

        if [[ "${MIN_LENGTH}" != "" ]]; then
          flags+=(--min-length "${MIN_LENGTH}")
        fi

        if [[ "${MAX_LENGTH}" != "" ]]; then
          flags+=(--max-length "${MAX_LENGTH}")
        fi

        if [[ "${MIN}" != "" ]]; then
          flags+=(--min "${MIN}")
        fi

        if [[ "${MAX}" != "" ]]; then
          flags+=(--max "${MAX}")
        fi

        if [[ "${ENUM}" != "" ]]; then
          flags+=(--enum "${ENUM}")
        fi

        if [[ "${TIMESTAMP}" != "" ]]; then
          flags+=(--timestamp "${TIMESTAMP}")
        fi

        if [[ "${PATTERN}" != "" ]]; then
          flags+=(--pattern "${PATTERN}")
        fi

        valid "${flags[@]}"
        echo "::endgroup::"
      shell: bash

branding:
  icon: check-circle
  color: green
