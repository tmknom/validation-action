name: Validation Action
description: |
  Validates input values against character sets, ranges, formats, and custom rules to prevent workflow failures.

inputs:
  value:
    required: true
    description: The value to validate against the specified rules.
  value-name:
    required: false
    description: The name of the `value` to include in error messages.
  mask-value:
    required: false
    description: Masks the `value` in error messages to protect sensitive data.
  not-empty:
    required: false
    description: Validates that the `value` is not empty.
  digit:
    required: false
    description: Validates that the `value` contains only digits (0-9).
  alpha:
    required: false
    description: Validates that the `value` contains only English letters (a-zA-Z).
  alphanumeric:
    required: false
    description: Validates that the `value` contains only English letters and digits (a-zA-Z0-9).
  ascii:
    required: false
    description: Validates that the `value` contains only ASCII characters.
  printable-ascii:
    required: false
    description: Validates that the `value` contains only printable ASCII characters.
  lower-case:
    required: false
    description: Validates that the `value` contains only lower case Unicode letters.
  upper-case:
    required: false
    description: Validates that the `value` contains only upper case Unicode letters.
  int:
    required: false
    description: Validates that the `value` is an integer.
  float:
    required: false
    description: Validates that the `value` is a floating-point number.
  url:
    required: false
    description: Validates that the `value` is a valid URL.
  domain:
    required: false
    description: Validates that the `value` is a valid domain.
  email:
    required: false
    description: Validates that the `value` is a valid email address.
  semver:
    required: false
    description: Validates that the `value` is a valid semantic version.
  uuid:
    required: false
    description: Validates that the `value` is a valid UUID.
  base64:
    required: false
    description: Validates that the `value` is a valid Base64 string.
  json:
    required: false
    description: Validates that the `value` is a valid JSON string.
  exact-length:
    required: false
    description: Validates that the length of `value` is exactly the specified number.
  min-length:
    required: false
    description: Validates that the length of `value` is greater than or equal to the specified minimum.
  max-length:
    required: false
    description: Validates that the length of `value` is less than or equal to the specified maximum.
  min:
    required: false
    description: Validates that the `value` is greater than or equal to the specified minimum.
  max:
    required: false
    description: Validates that the `value` is less than or equal to the specified maximum.
  enum:
    required: false
    description: Validates that the `value` matches one of the specified enumerations (comma-separated list).
  timestamp:
    required: false
    description: Validates that the `value` matches the timestamp format specified in the `timestamp` input (rfc3339, datetime, date, or time).
  pattern:
    required: false
    description: Validates that the `value` matches the specified regular expression.

outputs:
  error-message:
    value: ${{ steps.validate.outputs.error-message }}
    description: Output error messages when validation fails.

runs:
  using: composite

  steps:
    - name: Check Cosign is installed
      id: installed
      run: |
        echo "::group::Check Cosign is installed"
        set -x
        installed="false"
        if [ "$(which cosign)" ]; then
          installed="true"
        fi;
        echo "cosign=${installed}" >> "${GITHUB_OUTPUT}"
        echo "::endgroup::"
      shell: bash

    - name: Install Cosign
      uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1
      if: ${{ steps.installed.outputs.cosign == 'false' }}

    - name: Pull and verify image
      id: image
      env:
        IMAGE_REPOSITORY: tmknom/valid
        IMAGE_DIGEST: sha256:5278b698889b967087c34458f64215fb6c5d41a6bfbffa34911bdd8450f05a75 # v0.6.1
        IMAGE_SOURCE_DIGEST: 7319d19479cd9242331712e1f855cd7559e133c3
        IMAGE_SIGNER_DIGEST: c828b3f16d93cced26547858bf2f73c9790f3099
        IMAGE_SIGNER_WORKFLOW: https://github.com/tmknom/release-workflows/.github/workflows/go.yml
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        echo "::group::Pull and verify image"
        set -x
        image="ghcr.io/${IMAGE_REPOSITORY}@${IMAGE_DIGEST}"
        echo "repo-digest=${image}" >> "${GITHUB_OUTPUT}"
        docker pull "${image}"

        cosign verify \
          --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
          --certificate-identity "${IMAGE_SIGNER_WORKFLOW}@${IMAGE_SIGNER_DIGEST}" \
          --certificate-github-workflow-repository "${IMAGE_REPOSITORY}" \
          --certificate-github-workflow-sha "${IMAGE_SOURCE_DIGEST}" \
          "${image}" 2>/dev/null

        gh attestation verify "oci://${image}" \
          --deny-self-hosted-runners \
          --cert-oidc-issuer "https://token.actions.githubusercontent.com" \
          --cert-identity "${IMAGE_SIGNER_WORKFLOW}@${IMAGE_SIGNER_DIGEST}" \
          --repo "${IMAGE_REPOSITORY}"

        docker run --interactive --rm --user 1111:1111 --read-only \
          --security-opt no-new-privileges --cap-drop all --network none \
          "${image}" --version
        echo "::endgroup::"
      shell: bash

    - name: Run valid
      id: validate
      env:
        IMAGE_REPO_DIGEST: ${{ steps.image.outputs.repo-digest }}
        VALUE: ${{ inputs.value }}
        VALUE_NAME: ${{ inputs.value-name }}
        MASK_VALUE: ${{ inputs.mask-value }}
        NOT_EMPTY: ${{ inputs.not-empty }}
        DIGIT: ${{ inputs.digit }}
        ALPHA: ${{ inputs.alpha }}
        ALPHANUMERIC: ${{ inputs.alphanumeric }}
        ASCII: ${{ inputs.ascii }}
        PRINTABLE_ASCII: ${{ inputs.printable-ascii }}
        LOWER_CASE: ${{ inputs.lower-case }}
        UPPER_CASE: ${{ inputs.upper-case }}
        INT: ${{ inputs.int }}
        FLOAT: ${{ inputs.float }}
        URL: ${{ inputs.url }}
        DOMAIN: ${{ inputs.domain }}
        EMAIL: ${{ inputs.email }}
        SEMVER: ${{ inputs.semver }}
        UUID: ${{ inputs.uuid }}
        BASE64: ${{ inputs.base64 }}
        JSON: ${{ inputs.json }}
        EXACT_LENGTH: ${{ inputs.exact-length }}
        MIN_LENGTH: ${{ inputs.min-length }}
        MAX_LENGTH: ${{ inputs.max-length }}
        MIN: ${{ inputs.min }}
        MAX: ${{ inputs.max }}
        ENUM: ${{ inputs.enum }}
        TIMESTAMP: ${{ inputs.timestamp }}
        PATTERN: ${{ inputs.pattern }}
      run: |
        echo "::group::Run valid"
        set -x
        flags=(--value "${VALUE}" --format "github-actions")

        if [[ "${VALUE_NAME}" != "" ]]; then
          flags+=(--value-name "${VALUE_NAME}")
        fi

        if [[ "${NOT_EMPTY}" != "" && "${NOT_EMPTY}" != "false" ]]; then
          flags+=(--not-empty)
        fi

        if [[ "${DIGIT}" != "" && "${DIGIT}" != "false" ]]; then
          flags+=(--digit)
        fi

        if [[ "${ALPHA}" != "" && "${ALPHA}" != "false" ]]; then
          flags+=(--alpha)
        fi

        if [[ "${ALPHANUMERIC}" != "" && "${ALPHANUMERIC}" != "false" ]]; then
          flags+=(--alphanumeric)
        fi

        if [[ "${ASCII}" != "" && "${ASCII}" != "false" ]]; then
          flags+=(--ascii)
        fi

        if [[ "${PRINTABLE_ASCII}" != "" && "${PRINTABLE_ASCII}" != "false" ]]; then
          flags+=(--printable-ascii)
        fi

        if [[ "${LOWER_CASE}" != "" && "${LOWER_CASE}" != "false" ]]; then
          flags+=(--lower-case)
        fi

        if [[ "${UPPER_CASE}" != "" && "${UPPER_CASE}" != "false" ]]; then
          flags+=(--upper-case)
        fi

        if [[ "${INT}" != "" && "${INT}" != "false" ]]; then
          flags+=(--int)
        fi

        if [[ "${FLOAT}" != "" && "${FLOAT}" != "false" ]]; then
          flags+=(--float)
        fi

        if [[ "${URL}" != "" && "${URL}" != "false" ]]; then
          flags+=(--url)
        fi

        if [[ "${DOMAIN}" != "" && "${DOMAIN}" != "false" ]]; then
          flags+=(--domain)
        fi

        if [[ "${EMAIL}" != "" && "${EMAIL}" != "false" ]]; then
          flags+=(--email)
        fi

        if [[ "${SEMVER}" != "" && "${SEMVER}" != "false" ]]; then
          flags+=(--semver)
        fi

        if [[ "${UUID}" != "" && "${UUID}" != "false" ]]; then
          flags+=(--uuid)
        fi

        if [[ "${BASE64}" != "" && "${BASE64}" != "false" ]]; then
          flags+=(--base64)
        fi

        if [[ "${JSON}" != "" && "${JSON}" != "false" ]]; then
          flags+=(--json)
        fi

        if [[ "${EXACT_LENGTH}" != "" ]]; then
          flags+=(--exact-length "${EXACT_LENGTH}")
        fi

        if [[ "${MIN_LENGTH}" != "" ]]; then
          flags+=(--min-length "${MIN_LENGTH}")
        fi

        if [[ "${MAX_LENGTH}" != "" ]]; then
          flags+=(--max-length "${MAX_LENGTH}")
        fi

        if [[ "${MIN}" != "" ]]; then
          flags+=(--min "${MIN}")
        fi

        if [[ "${MAX}" != "" ]]; then
          flags+=(--max "${MAX}")
        fi

        if [[ "${ENUM}" != "" ]]; then
          flags+=(--enum "${ENUM}")
        fi

        if [[ "${TIMESTAMP}" != "" ]]; then
          flags+=(--timestamp "${TIMESTAMP}")
        fi

        if [[ "${PATTERN}" != "" ]]; then
          flags+=(--pattern "${PATTERN}")
        fi

        if [[ "${MASK_VALUE}" != "" && "${MASK_VALUE}" != "false" ]]; then
          flags+=(--mask-value)
          set +x # disable printing of the command and its arguments
        fi

        log_file="${RUNNER_TEMP}/error-${GITHUB_ACTION}.log"
        docker run --interactive --rm --user 1111:1111 --read-only \
          --security-opt no-new-privileges --cap-drop all --network none \
          "${IMAGE_REPO_DIGEST}" "${flags[@]}" 2>"${log_file}" || ret="$?"

        if [[ -f "${log_file}" ]]; then
          message="$(cat "${log_file}")"
          echo "error-message=${message}" >> "${GITHUB_OUTPUT}"
          echo "${message}"
        fi
        echo "::endgroup::"
        exit "${ret:-0}"
      shell: bash

branding:
  icon: check-circle
  color: green
